#!/bin/bash
# SPDX-License-Identifier: GPL-2.0-only

# Copyright (c) 2017-2019, AT&T Intellectual Property.
# All Rights Reserved.

# Copyright (c) 2017 by Brocade Communications Systems, Inc.
# All rights reserved.

#
# Returns the partition numbers of given labels in a list in a grepable format
#
figure_out_partition_number ()
{
  local drive=$1
  local labels=$2
  local output=''
  local tmp=''

  if [ $# -gt 2 ]; then
    lecho "figure_out_partition_number(): Invalid inputs"
    exit 1
  fi

  # No partitions to save
  if [ -z "$labels" ]; then
    return
  fi

  # Check using the FS label. Supports loop devices
  for i in $(part_num_list $drive); do
    if [[ $drive == *"loop"* ]]; then
      if [ $( echo $labels | grep -oh "$(e2label /dev/mapper/${drive}p$i 2> /dev/null)" ) ]; then
        output+="$i\\|"
      fi
    else
      if [ $( echo $labels | grep -oh "$(e2label /dev/${drive}$i 2> /dev/null)" ) ]; then
        output+="$i\\|"
      fi
    fi
  done

  # remove trailing \|
  if [ -n "$output" ]; then
    echo ${output::-2}
  fi
}

# Return a sorted list of all partition numbers
part_num_list () {
   local dev=${1}
   if [[ "$dev" =~ mmcblk || "$dev" =~ nvme ]]; then
     local tmp=$(lsblk /dev/$dev --output KNAME | egrep -oh 'p[0-9]+$' | sort -u | sort -n)
     tmp=${tmp//p}
   else
     local tmp=$(lsblk /dev/$dev --output KNAME | egrep -oh '[0-9]+$' | sort -u | sort -n)
   fi
   for i in $tmp; do
     local list+="$(echo $i) "
   done
   if [ -n "$list" ]; then
     echo "${list::-1}"
   fi
}

total_number_of_partitions ()
{
  local drive=$1
  local arr=( $(part_num_list $drive) )
  local max=${#arr[@]}
  echo $max
}

highest_partition_number ()
{
  local drive=$1
  local max=0
  for i in $(part_num_list $drive); do
    (( $i > $max )) && max=$i
  done
  echo $max
}

first_missing_part () {
  local drive=$1
  local increment=1
  local sorted_arr=$( echo $(part_num_list $drive) | sort -t' ')
  for i in $sorted_arr; do
    if [ $i -eq $increment ]; then
      ((increment++))
      continue
    fi
  done
  if [[ "$drive" =~ mmcblk || "$drive" =~ nvme ]]; then
    echo "p$increment"
  else
    echo $increment
  fi
}

float_eval()
{
    local float_scale=2
    local stat=0
    local result=0.0
    if [[ $# -gt 0 ]]; then
        result=$(echo "scale=$float_scale; $*" | bc -q 2>/dev/null)
        stat=$?
        if [[ $stat -eq 0  &&  -z "$result" ]]; then stat=1; fi
    fi
    echo $result
    return $stat
}

#
# translate '1MB' to '1024' (kiB) Note the trailing uint gets trimmed
#
_to_kiB () {
    local value=$1
    if [ -z "$value" ]; then
        return 1
    fi
    if [[ $value =~ ([0-9]+.[0-9]+MB|[0-9]+MB) ]]; then
        trimmed_value=$(echo $value | rev | cut -c 3- | rev)
        answer=$(float_eval "$trimmed_value * 1024" )
        echo $answer
    elif [[ $value =~ ([0-9]+.[0-9]+kiB|[0-9]+kiB) ]]; then
        # already in kiB format, echoing trimmed result back
        trimmed_value=$(echo $value | rev | cut -c 4- | rev)
        echo $trimmed_value
    else
        return 1
    fi
    return 0
}

#
# translate '1024kiB' to '1' (MB) Note the trailing unit gets trimmed
#
_to_MB () {
    local value=$1
    if [ -z "$value" ]; then
        return 1
    fi
    if [[ $value =~ ([0-9]+.[0-9]+kiB|[0-9]+kiB) ]]; then
        trimmed_value=$(echo $value | rev | cut -c 4- | rev)
        answer="$(float_eval "$trimmed_value / 1024")"
        echo $answer
    elif [[ $value =~ ([0-9]+.[0-9]+MB|[0-9]+MB) ]]; then
        # already in MB format, echoing trimmed result back
        trimmed_value=$(echo $value | rev | cut -c 3- | rev)
        echo $trimmed_value
    else
        return 1
    fi
    return 0
}

#
# Remove all partitions on a drive except given list
# Returns number of partitions left on the drive
#
remove_all_partitions_except ()
{
  local drive=$1
  local list=$2
  local part_nums_to_save=$(figure_out_partition_number $drive "$list")
  local total=$(highest_partition_number $drive)

  # Need a value so that grep -v works properly
  if [ -z $part_nums_to_save ]; then
    part_nums_to_save=0
  fi

  # EX: In a sequence form 1 - 10, we remove the numbers that we want to save
  for i in `seq 1 $total | grep -v "$part_nums_to_save"`; do
    run_command parted --script /dev/$drive rm $i &>/dev/null
  done

  # How many parts are left?
  echo $(total_number_of_partitions $drive)
}

find_first_fit() {
  local drive=$1
  local desired_size=$2
  while IFS='' read -r LINE || [[ -n $LINE ]]; do
    args=( ${LINE//MB} )
    start=${args[0]}
    size=${args[2]}
    # expr doesn't work for floats, use awk
    if $(awk "BEGIN{ if ($size >= $desired_size){ exit 0 } exit 1 }"); then
		awk -f /dev/stdin <<EOF
BEGIN{
    if ($start < 1) {
        printf("1024kiB\n")
    } else {
        printf("%sMB\n", $start)
    }
}

EOF

      return 0
    fi
  done < <( parted $drive unit MB p free | grep 'Free Space' )
  return 1
}
